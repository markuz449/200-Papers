package week11;

import java.util.*;
/** A quick sort implementation which is able to be observed through its
 *  Sorter superclass.
 *
 *  @author Marcus Anderson.
 */
public class QuickSort extends Sorter {

    /** Create a new QuickSort sorter with the given integers to sort.
     * 
     *  @param nums the integers to sort.
     */
    public QuickSort(Integer[] nums) {
        super(nums); // pass nums[] to the superclass Sort
    }

    /**
     * Sort the integers which are stored in the parent Sorter class
     * using the QuickSort algorithm. 
     */
    public void sortNums() {
        comparisons = 0;
        i = 0;
        j = nums.length;
        quickSort(i, j);
    }

    /** Creates the pivot for quick sort
     *  and then recursivly split the data agin until there is nothing. 
     *
     *  @param lo of type int which is is the lowest value of the array.
     *  @param hi of type int which is is the largest value of the array.
     */
    public void quickSort(int lo, int hi) {
        if (hi - lo <= 1) {
            return;
        }
        int p = partition(lo, hi);
        quickSort(lo, p);
        quickSort(p+1, hi);
    }

    /** Chooses the pivot point for quick sort
     *  and then puts all the larger or equal values on the right of the pivot
     *  and then puts all the smaller values on the left of the pivot.
     *
     *  @param lo of type int which is is the lowest value of the array.
     *  @param hi of type int which is is the largest value of the array.
     *
     *  @return the pivot point.
     */
    private int partition(int lo, int hi) {
        int pivot = nums[lo];
        int hole = lo;
        int left = lo+1;
        int right = hi-1;
        while (true){
            while (right > hole && nums[right] >= pivot) {
                right--;
                comparisons++;
                update();
            }
            if (right == hole) {
                break;
            }
            nums[hole] = nums[right];
            hole = right;
            while (left < hole && nums[left] < pivot) {
                left++;
                comparisons++;
                update();
            }
            if (left == hole) {
                break;
            }
            nums[hole] = nums[left];
            hole = left;
        }
        nums[hole] = pivot;
        return hole;
    }
}

